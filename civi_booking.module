<?php
/**
 * Author @erawat.
 */
/**
 * Implements hook_civicrm_config()
 * Add's our template directory to the Smarty path so that it finds our
 * templates first.  Also adds our PHP directory to the PHP include path so that
 * it finds our PHP classes and other files first on require or include.
 */
function civi_booking_civicrm_config(&$config) {
  $template =& CRM_Core_Smarty::singleton();
 
  $root = dirname(__FILE__) . DIRECTORY_SEPARATOR;
  $template_dir = $root . 'templates';

  // Add our template directory to the Smarty templates path
  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $template_dir);
  }
  else {
    $template->template_dir = array($template_dir, $template->template_dir);
  }
 
  // Also fix php include path
  $include_path = $root . 'php' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);
}

  /* @erawat hacked */
function find_slot($id = 0, $status = 0, $sessionType = null){
  if($id == 0){
    $idSQL = 'civi_booking_slot.id IS NOT NULL ';
  }else{
    $idSQL = 'civi_booking_slot.id = ' . $id;
  }
  $params = array( 1 => array( $status, 'Integer'));
  $query = "SELECT
              civi_booking_slot.id as id, 
              civi_booking_slot.start_time as start_time,
              civi_booking_slot.end_time as end_time, 
              civi_booking_slot.slot_date as slot_date,
              civi_booking_room.room_no as room_no,
              civicrm_contact.sort_name as sort_name
            FROM civi_booking_slot 
            LEFT JOIN civicrm_contact ON civicrm_contact.id = civi_booking_slot.id
            LEFT JOIN civi_booking_room ON civi_booking_room.id = civi_booking_slot.room_id
            WHERE {$idSQL} AND civi_booking_slot.status = %1";
  require_once('CRM/Core/DAO.php');   
  $dao = CRM_Core_DAO::executeQuery( $query, $params );
  $results = array ();
    while ( $dao->fetch( ) ) {
      $results[] = $dao->toArray();   
   }
  
  return $results;
       
}

function civi_booking_create_slot($slot) {
   // The transaction opens here.
  $txn = db_transaction();

  try {
    $id = db_insert('civi_booking_slot')
      ->fields(array(
        'contact_id' => $slot['contact_id'],
        'room_id' => $slot['room_id'],
        'start_time' => $slot['start_time'],
        'end_time' => $slot['end_time'],
        'slot_date' => $slot['slot_date'],
        'session_type' => $slot['session_type'],
        'status ' => $slot['status'],
        'created_by' => $slot['created_by'],

      ))
      ->execute();
    return $id;
  }
  catch (Exception $e) {
    // Something went wrong somewhere, so roll back now.
    $txn->rollback();
    // Log the exception to watchdog.
    watchdog_exception('type', $e);
  }
}

function civi_booking_create_slot_activity($slot) {
   // The transaction opens here.
  $txn = db_transaction();

  try {
    $id = db_insert('civi_booking_slot_activity')
      ->fields(array(
        'slot_id' => $slot['contact_id'],
        'activity_id' => $slot['room_id'],       
      ))
      ->execute();
    return $id;
  }
  catch (Exception $e) {
    // Something went wrong somewhere, so roll back now.
    $txn->rollback();
    // Log the exception to watchdog.
    watchdog_exception('type', $e);
  }
}

 
function civi_booking_get_rooms(){
  $query = "SELECT id, room_no, floor
      FROM civi_booking_room
      WHERE is_active = 1";
  civicrm_initialize( );
  require_once('CRM/Core/DAO.php'); 
  $dao = CRM_Core_DAO::executeQuery( $query );
  $results = array ();
  while ( $dao->fetch( ) ) {
      $results[] = $dao->toArray();          
  }

  $rooms = array();
  foreach($results as $room){
    $id = CRM_Utils_Array::value('id',$room);
    $rooms[$id]['id'] = CRM_Utils_Array::value('id',$room);   
    $rooms[$id]['room_no'] = CRM_Utils_Array::value('room_no',$room);   
    $rooms[$id]['floor'] = CRM_Utils_Array::value('floor',$room);   
  } 
  return $rooms;

}

function civi_booking_find_contacts($type = 'Clinician'){
  require_once 'api/api.php';
  $results = civicrm_api("Contact", "get", array ('version' => '3','sequential' =>'1', 'contact_type' =>'Individual', 'contact_sub_type' => $type , 'rowCount' =>'0'));
              
  $contacts = array();
  foreach($results['values'] as $contact){
    $id = CRM_Utils_Array::value('contact_id',$contact);  
    $contacts[$id]['contact_id'] = CRM_Utils_Array::value('id',$contact);   
    $contacts[$id]['display_name'] = CRM_Utils_Array::value('display_name',$contact);   
  } 
  return $contacts;
}

/**
 * Implements hook_menu().
 */
function civi_booking_menu() {
   $items['booking/create-slot'] = array(
    'title' => 'Create a slot',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('create_slot_form'),
    'access arguments' => array('access CiviCRM'),
  );
  return $items;
}



/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 *
function civi_booking_theme() {
  return array(   
    'create_slot_form'  => array(
      'render element' => 'form',
      // In this one the rendering will be done by a tpl.php file instead of
      // being rendered by a function, so we specify a template.
      'template' => 'create-slot',
    ),     
  ); 
}
*/

/**
 * A create apponintment form.
 *
 * This form will be rendered by theme('form') (theme_form() by default)
 * because we do not provide a theme function for it here.
 */
function create_slot_form($form, &$form_state) {
  $roomOptions = array( NULL => t('Select a room'));
  $rooms =  civi_booking_get_rooms();
  foreach($rooms as $room){
    $roomOptions[$room['id']] = $room['room_no'];
  } 


  $counsellorOptions = array( NULL => t('Select counsellor'));
  $counsellors =  civi_booking_find_contacts();
  foreach($counsellors as $counsellor){
    $counsellorOptions[$counsellor['contact_id']] = $counsellor['display_name'];
  } 
   
  $form['room_id'] = array(
    '#title' => t('Room'),
    '#type' => 'select',
    '#options' => $roomOptions,
  );
  $form['contact_id'] = array(
    '#title' => t('Counsellor'),
    '#type' => 'select',
    '#options' => $counsellorOptions,
  ); 

  $supplementaryAssessment = CRM_Core_OptionGroup::getValue( 'activity_type', 'Supplementary Assessment' );
  $initialAssessment = CRM_Core_OptionGroup::getValue( 'activity_type', 'Initial Assessment' );
  $regularSession = CRM_Core_OptionGroup::getValue( 'activity_type', 'Regular Session' );

  $sesionType =  array(
    NULL => t('Select session type'),
    $initialAssessment => t('Initial assessment'),
    $supplementaryAssessment => t('Supplementary assessment'),
    $regularSession => t('Regular session'),
  );  


  $form['session_type'] = array(
    '#title' => t('Session type'),
    '#type' => 'select',
    '#options' => $sesionType,
  );  

  $date = strtotime('next Sunday');

  $dayOfWeek = array(NULL => t('Select day'));
  for($i = 1; $i <= 5; $i++){
     $day = strtotime('+'. $i .' day', $date);
     $dayOfWeek[$day] =  date('l d-m-Y', $day); 
  }

  $form['slot_date'] = array(
    '#title' => t('Day of week'),
    '#type' => 'select',
    '#options' => $dayOfWeek,
  );  

  // create array of time ranges 
  $times = create_time_range('9:30', '17:30', '30 mins'); 

  $timeOptions = array(
    NULL => t('Select time')
  );
  // format the unix timestamps 
  foreach ($times as $key => $time) { 
    $timeOptions[$time] = date('G:i', $time); 
    //$times[$key] = date('g:i', $time); 
  }

  $form['start_time'] = array(
    '#title' => t('Start time'),
    '#type' => 'select',
    '#options' => $timeOptions,

  ); 
  $form['end_time'] = array(
    '#title' => t('End time'),
    '#type' => 'select',
    '#options' => $timeOptions,
  ); 

 

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create appointment'),
  );
  
  return $form;
}

/**
 * A project landing form submit.
 *
*/
function create_slot_form_submit($form, &$form_state) {
  $roomId = $form_state['values']['room_id'];  
  $contactId = $form_state['values']['contact_id']; 
  $slotDate = $form_state['values']['slot_date'];  
  $startTime = $form_state['values']['start_time']; 
  $endTime = $form_state['values']['end_time'];  
  $sessionType = $form_state['values']['session_type'];  
 
  $slot = array(
     'contact_id' => $contactId,
     'room_id' => $roomId,
     'start_time' =>  date('G:i',$startTime),
     'end_time' =>  date('G:i',$endTime),
     'slot_date' => date('Y-m-d H:i:s',$slotDate),
     'session_type' => $sessionType,
     'status' => 0,
     'created_by' => 1,
  );

  $id = civi_booking_create_slot($slot);
  if(isset($id)){
    drupal_set_message('The slot has been created', 'status');

  }else{
    drupal_set_message('The system cannot create slot', 'error');
  }
 
}

function create_slot_form_validate($form, &$form_state) {
  // Validation logic.
}

/**
 * Implements template_preprocess() to add information to the
 * template_preprocess_project_landing_form();
 *


function template_preprocess_create_slot_form(&$variables) {  
  $variables['text_form_content'] = array();
  $text_form_hidden = array();  

  // Provide variables named after form keys so theme can output each element independently.
  
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $text_form_hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      $variables['text_form_content'][$key] = drupal_render($variables['form'][$key]);
    }
  }
  
 // Hidden form elements have no value in the theme. No need for separation.
  $variables['text_form_content']['hidden'] = implode($text_form_hidden);
   
  // Collect all form elements to make it easier to print the whole form.
  $variables['text_form'] = implode($variables['text_form_content']);

}
 */


/**
 * Add functionality to select slots
 */
function civi_booking_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Case_Form_Activity') {
    if($form->getAction() == CRM_Core_Action::ADD){

      $activityTypeId =  $form->_activityTypeId;
      if($activityTypeId == 50 || 
        $activityTypeId == 51 ||
        $activityTypeId == 52 ){ //Hard code for activity type id should change to check name instead of id

        $results = find_slot(0,0,$activityTypeId);
        $slots = array();
        foreach($results as $slot){
          $id = CRM_Utils_Array::value('id',$slot);

          $date = new DateTime(CRM_Utils_Array::value('slot_date',$slot));

          $slots[$id] = CRM_Utils_Array::value('sort_name',$slot) . ', ' . 
          CRM_Utils_Array::value('room_no',$slot) . ', ' . 
          date_format($date, 'l d/m/Y' ) . ',' . 
          date('G:i', strtotime(CRM_Utils_Array::value('start_time',$slot)))  . ' - ' . 
          date('G:i', strtotime(CRM_Utils_Array::value('end_time',$slot)))  ;  
           
        } 
        $form->addElement('select', 
                        'slot_id', 
                        ts('Avaliable slot'),
                        $slots
                        );
       }
    }
   
  }
}


function civi_booking_civicrm_pre( $op, $objectName, $id, &$params ){
  if($objectName == 'Activity'){
    if($op == 'create'){
        $slotId = CRM_Utils_Array::value('slot_id',$params);
        $activityTypeId = CRM_Utils_Array::value('activity_type_id',$params);
        
        update_slot(1, $activityTypeId, $slotId);

        $results = find_slot($slotId, 1);
        $slot = $results[0];


        $startTime = (CRM_Utils_Array::value('start_time',$slot)); 
        $endTime   = (CRM_Utils_Array::value('end_time',$slot)); 

         //Convert date to slot timestamp
        $slotTimestamp = strtotime(CRM_Utils_Array::value('slot_date',$slot));

        //Convert timestamp to date formate thst CiviCRM uses.
        $params['activity_date_time'] =  date('m/d/Y', $slotTimestamp);
        $params['activity_date_time_time'] = date('g:iA', strtotime($startTime));

        //process date for proper formate
        $params['activity_date_time'] = CRM_Utils_Date::processDate( $params['activity_date_time'], $params['activity_date_time_time'] );

        //set activity location
        $params['location'] = CRM_Utils_Array::value('room_no',$slot);
        $params['duration'] = round(abs(strtotime($endTime) - strtotime($startTime)) / 60,2);

        //hacked adding slot id for custom field'
        $params['custom_34_-1'] = $slotId;
        $params['custom']['34']['-1']['value'] = $slotId;

    }
  }
}


function update_slot($status, $activityTypeId, $slotId) {
      
    $query = "
UPDATE civi_booking_slot
SET status = %1,
    session_type = %2
WHERE id = %3
";
 
    $params = array( 1  => array( $status, 'Integer' ),
                     2  => array( $activityTypeId, 'Integer' ),
                     3  => array( $slotId, 'Integer' ));
    CRM_Core_DAO::executeQuery( $query, $params );
}



/** 
 * create_time_range  
 *  
 * @param mixed $start start time, e.g., 9:30am or 9:30 
 * @param mixed $end   end time, e.g., 5:30pm or 17:30 
 * @param string $by   1 hour, 1 mins, 1 secs, etc. 
 * @access public 
 * @return void 
 */ 
function create_time_range($start, $end, $by='30 mins') { 

    $start_time = strtotime($start); 
    $end_time   = strtotime($end); 

    $current    = time(); 
    $add_time   = strtotime('+'.$by, $current); 
    $diff       = $add_time-$current; 

    $times = array(); 
    while ($start_time < $end_time) { 
        $times[] = $start_time; 
        $start_time += $diff; 
    } 
    $times[] = $start_time; 
    return $times; 
} 


function dump($val) {
    echo '<pre>'.var_export($val,true).'</pre>';
    return $val;
}





