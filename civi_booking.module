<?php
/**
 * Author @erawat.
 */
/**
 * Implements hook_civicrm_config()
 * Add's our template directory to the Smarty path so that it finds our
 * templates first.  Also adds our PHP directory to the PHP include path so that
 * it finds our PHP classes and other files first on require or include.
 */
function civi_booking_init() {
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/booking.css');
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/calendar.css');
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/schedule.css');
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/fullcalendar.css');
  //drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/fullcalendar.print.css');

  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/fullcalendar.js');
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/date.js');
  //drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/mustache.js');
  //jQuery validation
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/jquery.validate.min.js');
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/additional-methods.min.js');

}


function civi_booking_civicrm_config(&$config) {
  $template =& CRM_Core_Smarty::singleton();
 
  $root = dirname(__FILE__) . DIRECTORY_SEPARATOR;

  $template_dir = $root . 'templates';

  // Add our template directory to the Smarty templates path
  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $template_dir);
  }
  else {
    $template->template_dir = array($template_dir, $template->template_dir);
  }
 
  // Also fix php include path
  $include_path = $root . 'src' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);
}

  /* @erawat hacked  
function find_slot($id = 0, $status = 1, $sessionType = null){
  if($id == 0){
    $idSQL = 'civi_booking_slot.id IS NOT NULL ';
  }else{
    $idSQL = 'civi_booking_slot.id = ' . $id;
  }
  $params = array( 1 => array( $status, 'Integer'));
  $query = "SELECT
              civi_booking_slot.id as id, 
              civi_booking_slot.start_time as start_time,
              civi_booking_slot.end_time as end_time, 
              civi_booking_slot.slot_date as slot_date,
              civi_booking_slot.session_service as session_service,
              civi_booking_room.room_no as room_no,
              civicrm_contact.id as contact_id,
              civicrm_contact.sort_name as sort_name
            FROM civi_booking_slot 
            LEFT JOIN civicrm_contact ON civicrm_contact.id = civi_booking_slot.id
            LEFT JOIN civi_booking_room ON civi_booking_room.id = civi_booking_slot.room_id
            WHERE {$idSQL} AND civi_booking_slot.status = %1";
  require_once('CRM/Core/DAO.php');   
  $dao = CRM_Core_DAO::executeQuery( $query, $params );
  $results = array ();
    while ( $dao->fetch( ) ) {
      $results[] = $dao->toArray();   
   }
  
  return $results;
       
}

*/

/**
 * Add functionality to select slots
 */
function civi_booking_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Case_Form_Activity') {
    if($form->getAction() == CRM_Core_Action::ADD){

      $activityTypeId =  $form->_activityTypeId;
      if($activityTypeId == 50 || 
        $activityTypeId == 51 ||
        $activityTypeId == 52 ){ //Hard code for activity type id should change to check name instead of id


        $counsellorOptions = array( NULL => t('Select counsellor'));
        //$counsellors =  civi_booking_find_contacts();
        /*foreach($counsellors as $counsellor){
          $counsellorOptions[$counsellor['contact_id']] = $counsellor['display_name'];
        } 
         $form->addElement('select', 
                        'consellor_id', 
                        ts('Counsellor'),
                        $counsellorOptions);   
      */
        $form->addElement('text', 
                        'slot_id', 
                        ts('Slot Ref:'),
                        array('size' => 5));
        
        //Hacked adding activity_type_id for jQuery 
        $form->addElement('text', 
                        'activity_type', 
                        ts('Activity type'));       
       
       $defaults['activity_type'] =   $activityTypeId;
       $form->setDefaults($defaults); 
      }
    }
   
  }
}


function civi_booking_civicrm_pre( $op, $objectName, $id, &$params ){
  if($objectName == 'Activity'){
    if($op == 'create'){
        $activityTypeId = CRM_Utils_Array::value('activity_type_id',$params);
      
        if(
          $activityTypeId == 51 ||
          $activityTypeId == 52 ){  

          $slotId = CRM_Utils_Array::value('slot_id',$params);
        

          update_slot(2, $slotId); //update slot status

          $results = find_slot($slotId, 2);
          $slot = $results[0];

          $startTime = (CRM_Utils_Array::value('start_time',$slot)); 
          $endTime   = (CRM_Utils_Array::value('end_time',$slot)); 

           //Convert date to slot timestamp
          $slotTimestamp = strtotime(CRM_Utils_Array::value('slot_date',$slot));

          //Convert timestamp to date formate thst CiviCRM uses.
          $params['activity_date_time'] =  date('m/d/Y', $slotTimestamp);
          $params['activity_date_time_time'] = date('g:iA', strtotime($startTime));

          //process date for proper formate
          $params['activity_date_time'] = CRM_Utils_Date::processDate( $params['activity_date_time'], $params['activity_date_time_time'] );

          //set activity location
          $params['location'] = CRM_Utils_Array::value('room_no',$slot);
          $params['duration'] = round(abs(strtotime($endTime) - strtotime($startTime)) / 60,2);

          //hacked adding slot id for custom field'
          $params['custom_34_-1'] = $slotId;
          $params['custom']['34']['-1']['value'] = $slotId;

          //TODO: add session service
           //hacked adding session service for custom field'
          $params['custom_16_-1'] =  CRM_Utils_Array::value('session_service',$slot);;
          $params['custom']['16']['-1']['value'] =  CRM_Utils_Array::value('session_service',$slot);;

    
        }


    }
  }
}


function update_slot($status, $slotId) {
      
    $query = "
UPDATE civi_booking_slot
SET status = %1    
WHERE id = %2
";
 
    $params = array( 1  => array( $status, 'Integer' ),
                     2  => array( $slotId, 'Integer' ));
    CRM_Core_DAO::executeQuery( $query, $params );
}



/** 
 * create_time_range  
 *  
 * @param mixed $start start time, e.g., 9:30am or 9:30 
 * @param mixed $end   end time, e.g., 5:30pm or 17:30 
 * @param string $by   1 hour, 1 mins, 1 secs, etc. 
 * @access public 
 * @return void 
 */ 
function create_time_range($start, $end, $by='30 mins') { 

    $start_time = strtotime($start); 
    $end_time   = strtotime($end); 

    $current    = time(); 
    $add_time   = strtotime('+'.$by, $current); 
    $diff       = $add_time-$current; 

    $times = array(); 
    while ($start_time < $end_time) { 
        $times[] = $start_time; 
        $start_time += $diff; 
    } 
    $times[] = $start_time; 
    return $times; 
} 

function civicrm_civicrm_navigationMenu( &$params ) {
 
    //  Get the maximum key of $params
    $maxKey = ( max( array_keys($params) ) );

    $params[$maxKey+1] = 
                        array (
                          'attributes' => 
                          array (
                            'label' => 'Booking',
                            'name' => 'Booking',
                            'url' => NULL,
                            'permission' => NULL,
                            'operator' => '',
                            'separator' => NULL,
                            'parentID' => NULL,
                            'navID' => $maxKey+1,
                            'active' => '1',
                          ),
                          'child' => 
                          array (
                            $maxKey+2 => 
                            array (
                              'attributes' => 
                              array (
                                'label' => 'Create Slots',
                                'name' => 'Create slots',
                                'url' => 'civicrm/booking/create-slots&reset=1',
                                'permission' => NULL,
                                'operator' => '',
                                'separator' => NULL,
                                'parentID' => $maxKey+1,
                                'navID' => $maxKey+2,
                                'active' => '1',
                              ),
                              'child' => NULL,
                            )));
 
}

function civi_booking_civicrm_xmlMenu( &$files ) {
      $files[] = drupal_get_path('module', 'civi_booking') . "/menu.xml";
 }


function dump($val) {
    echo '<pre>'.var_export($val,true).'</pre>';
    return $val;
}


/**
 * Implements hook_webform_select_options_info().
 */
function civi_booking_webform_select_options_info() {
  $items = array();
  $items['slots'] = array(
    'title' => t('Slots'),
    'options callback' => 'find_slot',
  );
  return $items;
}

function civi_booking_form_alter(&$form, &$form_state, $form_id){
    
    if(strstr($form_id, 'webform_client_form_1')){
      $form['#attached']['js'] = array(
        drupal_get_path('module', 'civi_booking') . '/js/date.js',
      );
    }
    drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/webform-signup.js', array('type' => 'file'));
    
}



/**
 * Modify a Webform submission, prior to saving it in the database.
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that is about to be saved to the database.
 */
function civi_booking_webform_submission_presave($node, &$submission) {
  //dump($node);

 
}

/**
 * Respond to a Webform submission being inserted.
 *
 * Note that this hook is called after a submission has already been saved to
 * the database. If needing to modify the submission prior to insertion, use
 * hook_webform_submission_presave().
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just inserted into the database.
 */
function civi_booking_webform_submission_insert($node, $submission) {
  // Insert a record into a 3rd-party module table when a submission is added.
  /*
  db_insert('mymodule_table')
    ->fields(array(
      'nid' => $node->nid,
      'sid' => $submission->sid,
      'foo' => 'foo_data',
    ))
    ->execute();
  */  
  //dump($node);
  //echo '##################################';  
 // dump($submission);

  //exit;

}



function find_slot(){

  $query = "SELECT
              civi_booking_slot.id as id, 
              civi_booking_slot.start_time as start_time,
              civi_booking_slot.end_time as end_time, 
              civi_booking_slot.slot_date as slot_date,
              civi_booking_slot.session_service as session_service,
              civi_booking_room.room_no as room_no,
              civicrm_contact.id as contact_id,
              civicrm_contact.sort_name as sort_name
            FROM civi_booking_slot 
            LEFT JOIN civicrm_contact ON civicrm_contact.id = civi_booking_slot.clinician_contact_id
            LEFT JOIN civi_booking_room ON civi_booking_room.id = civi_booking_slot.room_id
            WHERE civi_booking_slot.status = 1 
            AND civi_booking_slot.activity_type = 50
            AND civi_booking_slot.slot_date > now()";
  civicrm_initialize( );
  require_once('CRM/Core/DAO.php');   
  $dao = CRM_Core_DAO::executeQuery( $query );
  $results = array ();
    while ( $dao->fetch( ) ) {
      $results[] = $dao->toArray();   
   }

  $slots = array();
  if(sizeof($results) == 0){
    $slots[] = t('-- No available slots found --');
  }else{
    $slots[] = t('-- Select a slot --');
  }
  foreach($results as $slot){
    $id = CRM_Utils_Array::value('id',$slot);
    $date = new DateTime(CRM_Utils_Array::value('slot_date',$slot));
    $slots[$id] = CRM_Utils_Array::value('sort_name',$slot) . ', ' . 
    CRM_Utils_Array::value('room_no',$slot) . ', ' . 
    date_format($date, 'l d/m/Y' ) . ',' . 
    date('G:i', strtotime(CRM_Utils_Array::value('start_time',$slot)))  . ' - ' . 
    date('G:i', strtotime(CRM_Utils_Array::value('end_time',$slot)))  ;  
  } 
  
  return $slots;
       
}



