<?php
/**
 * Author @erawat.
 */
/**
 * Implements hook_civicrm_config()
 * Add's our template directory to the Smarty path so that it finds our
 * templates first.  Also adds our PHP directory to the PHP include path so that
 * it finds our PHP classes and other files first on require or include.
 */
function civi_booking_init() {
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/booking.css');
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/calendar.css');
  drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/schedule.css');
  //drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/fullcalendar.css');
  //drupal_add_css(drupal_get_path('module', 'civi_booking') . '/css/fullcalendar.print.css');

  //drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/fullcalendar.js');
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/date.js');
  //drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/mustache.js');
  //jQuery validation
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/jquery.validate.min.js');
  drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/additional-methods.min.js');
  //jQuery tooltips
  //////////drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/jquery.qtip-1.0.0-rc3.min.js');


}


function civi_booking_civicrm_config(&$config) {
  $template =& CRM_Core_Smarty::singleton();
 
  $root = dirname(__FILE__) . DIRECTORY_SEPARATOR;

  $template_dir = $root . 'templates';

  // Add our template directory to the Smarty templates path
  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $template_dir);
  }
  else {
    $template->template_dir = array($template_dir, $template->template_dir);
  }
 
  // Also fix php include path
  $include_path = $root . 'src' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);
}


function civi_booking_civicrm_tabs( &$tabs, $contactID ) {

    $subType = CRM_Contact_BAO_Contact::getContactSubType($contactID);
    
    if(empty($subType) || !in_array('Clinician', $subType)){
      return;
    }

    $url = CRM_Utils_System::url( 'civicrm/booking/calendar/contact/',
                                  "reset=1&cid={$contactID}&snippet=1" );

    $tabs[] = array( 'id'    => 'calendarView',
                     'url'   => $url,
                     'title' => 'Calendar',
                     'weight' => 300 );
}

  

/**
 * Add functionality to select slots
 */
function civi_booking_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Case_Form_Activity') {
    if($form->getAction() == CRM_Core_Action::ADD 
      || $form->getAction() == CRM_Core_Action::UPDATE){

      $activityTypeId =  $form->_activityTypeId;
      if($activityTypeId == 50 || 
        $activityTypeId == 51 ||
        $activityTypeId == 52 ){ //Hard code for activity type id should change to check name instead of id


        //$counsellorOptions = array( NULL => t('Select counsellor'));
        //$counsellors =  civi_booking_find_contacts();
        /*foreach($counsellors as $counsellor){
          $counsellorOptions[$counsellor['contact_id']] = $counsellor['display_name'];
        } 
         $form->addElement('select', 
                        'consellor_id', 
                        ts('Counsellor'),
                        $counsellorOptions);   
      */
        $form->addElement('button', 
                        'select_slot', 
                        ts('Select a slot'));

        $form->addElement('text', 
                        'slot_id', 
                        ts('Selected slot ref:'),
                        array('size' => 5));
        
        //Hacked adding activity_type_id dummy for jQuery      
        $form->addElement('text', 
                        'activity_type', 
                        ts('Activity type'));       
       
       $defaults['activity_type'] =   $activityTypeId;
       $form->setDefaults($defaults); 
      }
    }
   
  }
}

function civi_booking_civicrm_post( $op, $objectName, $objectId, &$objectRef ){

  if($objectName == 'Activity'){
    $activityTypeId = $objectRef->activity_type_id;
 
    if($activityTypeId == 50 || 
       $activityTypeId == 51 ||
       $activityTypeId == 52 ){
      $originalId = $objectRef->original_id;    
      if($op == 'create' && isset($originalId)){
        //Query for the prior activity
        $query = "
SELECT max(ca.id) as activityID
FROM civicrm_log cl, civicrm_contact c, civicrm_activity ca
WHERE (ca.id = %1 OR ca.original_id = %1)
AND cl.entity_table = 'civicrm_activity'
AND cl.entity_id    = ca.id
AND cl.modified_id  = c.id
AND ca.id < {$objectId}
ORDER BY ca.id DESC";
       
              
      $params = array( 1 => array( $originalId, 'Integer' ) );
      $activityID    = CRM_Core_DAO::singleValueQuery( $query, $params );
 
      $query = "SELECT cc.slot_id_34
        FROM civicrm_value_additional_activity_info_8 cc
        WHERE cc.entity_id = %1";
         
      $params = array( 1 => array( $activityID, 'Integer' ) );
      $priorActSlotId = CRM_Core_DAO::singleValueQuery( $query,  $params );

      $params = array( 1 => array( $objectId, 'Integer' ) );
      $currentActSlotId = CRM_Core_DAO::singleValueQuery( $query,  $params );
      if($priorActSlotId != $currentActSlotId){ //A slot has been changed
          //release a slot
          CRM_Booking_BAO_Slot::setSlotStatus(array('slot_id' => $priorActSlotId ,'status' => 1)); 
      }
   
      }
    }
  }
}

function civi_booking_civicrm_pre( $op, $objectName, $id, &$params ){

  if($objectName == 'Activity'){
    $activityTypeId = CRM_Utils_Array::value('activity_type_id',$params);
   
    if(isset($activityTypeId) &&
          $activityTypeId == 50 || 
          $activityTypeId == 51 ||
          $activityTypeId == 52 ){ 

      if($op == 'create'){

          //$slotId = CRM_Utils_Array::value('slot_id',$params);
          $slotId = $params['custom']['34']['-1']['value'];

          //exit;
          //TODO Check if $slotId exist;
          if(is_null($slotId) && $slotId == ''){
            return;
          }
          civicrm_initialize( );
          require_once 'CRM/Booking/BAO/Slot.php';
          CRM_Booking_BAO_Slot::setSlotStatus(array('slot_id' => $slotId ,'status' => 2)); //set status to 2 to reserved 

          $results = CRM_Booking_BAO_Slot::getSlotById($slotId);
          $slot = $results[0];

          $startTime = (CRM_Utils_Array::value('start_time',$slot)); 
          $endTime   = (CRM_Utils_Array::value('end_time',$slot)); 

          //Convert date to slot timestamp
          $slotTimestamp = strtotime(CRM_Utils_Array::value('slot_date',$slot));

          //Convert timestamp to date formate thst CiviCRM uses.
          $params['activity_date_time'] =  date('m/d/Y', $slotTimestamp);
          $params['activity_date_time_time'] = date('g:iA', strtotime($startTime));

          //process date for proper formate
          $params['activity_date_time'] = CRM_Utils_Date::processDate( $params['activity_date_time'], $params['activity_date_time_time'] );
            
          //set assignee contact ids
          $params['assignee_contact_id'] = array();
          $params['assignee_contact_id'][0] = CRM_Utils_Array::value('clinician_contact_id',$slot);
          if(CRM_Utils_Array::value('attended_clinician_contact_id',$slot)){
            $params['assignee_contact_id'][1] = CRM_Utils_Array::value('attended_clinician_contact_id',$slot);
          }

          //set activity location
          $params['location'] = CRM_Utils_Array::value('centre',$slot);
          $params['details'] = 'Room No: ' . CRM_Utils_Array::value('room_no',$slot);
          $params['duration'] = round(abs(strtotime($endTime) - strtotime($startTime)) / 60,2);

          //hacked adding slot id for custom field to makesure the slot id has been assigned
          //$params['custom_34_-1'] = $slotId;
          //$params['custom']['34']['-1']['value'] = $slotId;

          //TODO: add session service
          //hacked adding session service for custom field'
          $params['custom_16_-1'] =  CRM_Utils_Array::value('session_service',$slot);
          $params['custom']['16']['-1']['value'] =  CRM_Utils_Array::value('session_service',$slot);

          $params['custom_22_-1'] = CRM_Utils_Array::value('centre',$slot);
          $params['custom']['22']['-1']['value'] = CRM_Utils_Array::value('centre',$slot);
      }
    }
  }
}


/** 
 * create_time_range  
 *  
 * @param mixed $start start time, e.g., 9:30am or 9:30 
 * @param mixed $end   end time, e.g., 5:30pm or 17:30 
 * @param string $by   1 hour, 1 mins, 1 secs, etc. 
 * @access public 
 * @return void 
 */ 
function create_time_range($start, $end, $by='30 mins') { 

    $start_time = strtotime($start); 
    $end_time   = strtotime($end); 

    $current    = time(); 
    $add_time   = strtotime('+'.$by, $current); 
    $diff       = $add_time-$current; 

    $times = array(); 
    while ($start_time < $end_time) { 
        $times[] = $start_time; 
        $start_time += $diff; 
    } 
    $times[] = $start_time; 
    return $times; 
} 

function civi_booking_civicrm_xmlMenu( &$files ) {
      $files[] = drupal_get_path('module', 'civi_booking') . "/menu.xml";
 }

/*
  Implements hook_webform_select_options_info().

function civi_booking_webform_select_options_info() {
  $items = array();
  $items['slots'] = array(
    'title' => t('Slots'),
    'options callback' => '_default_slot_options',
  );
  return $items;
}

function _default_slot_options(){
  $options = array();
  return $options;
}
*/
function civi_booking_form_alter(&$form, &$form_state, $form_id){
    
    if(strstr($form_id, 'webform_client_form_1')){
      $form['#attached']['js'] = array(
        drupal_get_path('module', 'civi_booking') . '/js/date.js',
      );
    }
    drupal_add_js(drupal_get_path('module', 'civi_booking') . '/js/webform-signup.js', array('type' => 'file'));
    
}


/**
 * Implements hook_menu().
*/
function civi_booking_menu() {
  /**
  * @Params (centre, services, start_date, end_date)
  */
  $items['slot/get/%'] = array(
     'page callback' => '_get available slots',
     'page arguments' => array(1,2,3,4,5),
     'access arguments' => array('access content'),
  );
  
  return $items;

}

function _get_available_slots($action, $service, $centre = null, $startDate = null) {
if(isset($action) && $action == 'get'){

  $query = "SELECT
              civi_booking_slot.id as id, 
              civi_booking_slot.start_time as start_time,
              civi_booking_slot.end_time as end_time, 
              civi_booking_slot.slot_date as slot_date,
              civi_booking_slot.status as status
            FROM civi_booking_slot 
            LEFT JOIN civicrm_contact ON civicrm_contact.id = civi_booking_slot.clinician_contact_id
            LEFT JOIN civi_booking_room ON civi_booking_room.id = civi_booking_slot.room_id
            WHERE civi_booking_slot.status IN (1, 2)
            AND civi_booking_slot.activity_type = 50
            AND civi_booking_slot.session_service = %1
            AND civi_booking_slot.slot_date BETWEEN %3 AND %4";
  if(isset($centre) && ($centre == 'WS' || $centre == 'AL')){
    $query .=  "\n AND civi_booking_room.building = %2";
  }
  civicrm_initialize( );
  require_once 'CRM/Booking/Utils/DateTime.php';
  if(isset($startDate) && $startDate != ''){
    $daysOfNextweek = CRM_Booking_Utils_DateTime::getWeeklyCalendar($startDate);
  }else{
    $daysOfNextweek = CRM_Booking_Utils_DateTime::getWeeklyCalendar();
  }
  $startDate = array_shift(array_values($daysOfNextweek));
  $endDate =  end($daysOfNextweek); 

  $query .= "\n ORDER BY civi_booking_slot.slot_date";

  $params = array( 1 => array( $service, 'String'),
                   2 => array( $centre, 'String'),
                   3 => array(date('Y-m-d H:i:s', $startDate), 'String'),
                   4 => array( date('Y-m-d H:i:s',$endDate), 'String'));
  require_once('CRM/Core/DAO.php');   
  $dao = CRM_Core_DAO::executeQuery( $query, $params);
  $results = array ();
  $results['is_error'] = "0";
  //$results['results'] = 0;
  $results['nextWeek'] = strtotime("next Monday" , $startDate);
  $results['lastWeek'] = strtotime("last Monday" , $startDate);
  while ( $dao->fetch( ) ) {
      $daoArr = $dao->toArray();
      $id = $daoArr['id'];
      $results['results'][$id]['slot_id'] = $id; 
      $results['results'][$id]['slot_date'] = date('d/m/Y', strtotime($daoArr['slot_date']));
      $results['results'][$id]['slot_day'] = date(l, strtotime($daoArr['slot_date']));; 
      $results['results'][$id]['start_time'] = date('G:i', strtotime($daoArr['start_time'])); 
      $results['results'][$id]['end_time'] = date('G:i', strtotime($daoArr['end_time'])); 
      $results['results'][$id]['status'] = $daoArrp['status'];

  }
}

echo json_encode ($results);

}

function dump($val) {
    echo '<pre>'.var_export($val,true).'</pre>';
    return $val;
}




